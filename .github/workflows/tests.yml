name: Tests

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    name: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup sccache
        uses: hanabi1224/sccache-action@v1.2.0
        timeout-minutes: 5
        continue-on-error: true
        with:
          release-name: v0.3.3
          cache-key: ${{ runner.os }}-sccache-tests-${{ hashFiles('rust-toolchain.toml') }}
          cache-update: ${{ github.event_name != 'pull_request' }}
      - name: Build
        run: cargo check --workspace --all-features --all-targets
        env:
          CC: "sccache clang"
          CXX: "sccache clang++"
      - name: Run tests
        run: cargo test --workspace --all-features --all-targets
        env:
          CC: "sccache clang"
          CXX: "sccache clang++"

  forest-sync-check:
    name: forest calibnet sync check
    runs-on: buildjet-8vcpu-ubuntu-2004
    steps:
      - uses: actions/checkout@v3
      - name: Setup sccache
        uses: hanabi1224/sccache-action@v1.2.0
        timeout-minutes: 5
        continue-on-error: true
        with:
          release-name: v0.3.3
          cache-key: ${{ runner.os }}-sccache-tests-${{ hashFiles('rust-toolchain.toml') }}
          cache-update: ${{ github.event_name != 'pull_request' }}
      - name: Update submodule forest
        run: make update-forest
      - name: Modify deps forest
        run: make modify-forest
      - name: Apt Dependencies Forest
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: sudo make -C forest install-deps
      - uses: actions/setup-go@v3
        with:
          go-version-file: "./forest/node/forest_libp2p/bitswap/tests/go-app/go.mod"
      - name: Install nextest
        uses: taiki-e/install-action@nextest
      - name: Test forest
        run: make test-all
        env:
          CC: "sccache clang"
          CXX: "sccache clang++"
      - name: Install forest
        run: make -C forest install
        env:
          CC: "sccache clang"
          CXX: "sccache clang++"
      - name: Calibnet health check
        env:
          CALIBNET_WALLET: ${{ secrets.CALIBNET_WALLET }}
        run: ./forest/scripts/calibnet_health_check.sh "$CALIBNET_WALLET"

  lint-all:
    name: All lint checks (lint audit spellcheck udeps)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
      - name: Apt Dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            sudo apt-get update -y
            sudo apt-get install -y libclang-dev # required dep for cargo-spellcheck
      - uses: hanabi1224/cache-cargo-bin-action@v1.0.0
      - name: Install Lint tools
        run: make install-lint-tools
        env:
          RUSTFLAGS: "-Cstrip=symbols"
      - name: Setup sccache
        uses: hanabi1224/sccache-action@v1.2.0
        timeout-minutes: 5
        continue-on-error: true
        with:
          release-name: v0.3.3
          cache-key: ${{ runner.os }}-sccache-lints-${{ hashFiles('rust-toolchain.toml') }}
          cache-update: ${{ github.event_name != 'pull_request' }}
      - run: make lint-all
        env:
          CC: "sccache clang"
          CXX: "sccache clang++"

  codecov:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup sccache
        uses: hanabi1224/sccache-action@v1.2.0
        timeout-minutes: 5
        continue-on-error: true
        with:
          release-name: v0.3.3
          cache-key: ${{ runner.os }}-sccache-codecov-${{ hashFiles('rust-toolchain.toml') }}
          cache-update: ${{ github.event_name != 'pull_request' }}
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: |
          cargo llvm-cov --workspace --all-features --all-targets --lcov --output-path lcov.info
        env:
          CC: "sccache clang"
          CXX: "sccache clang++"
      - name: Upload CodeCov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true
  cargo-dependency-check:
    name: Check cargo files for duplicates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
      - name: Run rubocop
        run: |
          gem install rubocop --no-document
          rubocop scripts/
      - name: Run dependencies checks
        run: |
          gem install toml-rb --no-document
          ruby scripts/find_duplicate_deps.rb && \
          ruby scripts/find_unused_deps.rb --ignore serde --ignore num --ignore num-bigint --ignore num-traits
